All instructions contains 14 bits

JUMPA INSTRUCTION : 

    opcode = "11"
    addr = "00000000" to "01111111" (8 bits)

    FORMAT :    
        opcode + "0000" + addr 

JUMPR INSTRUCTIONS :

    opcode = "10"
    
    flag (Flip-flop that contains the value of the flag for jump or not jump)
        where :
            flag_z = "00" (zero)
            flag_nz = "01" (not zero)
            flag_n =  "10" (negative)
            flag_nn = "11" (not negative)
    
    rel (Value to jump from current instruction) - 8 bits of a two's complement number

    FORMAT : 
        opcode + flag + "00" + rel



R INSTRUCTIONS: 

    opcode = "00"

    flag_ram = '00' (Reg to Reg) or '01' (Reg to Ram) or '10' (Ram to Reg)

    function = "00" to "11"
        where :
            "00" => ADD 
            "01" => CMP
            "10" => SUB
            "11" => MOV

    Reg1 = "000" to "111"
    Reg2 = "001" to "111"  

    **WARNING : Reg "000" is READ-ONLY so can't be assigned any value!!

    FORMAT :
        opcode + Reg1 + Reg2 + "00" + flag_ram + function

    Description : 

    (flag_no_ram = '00')

        ADD : Reg1 <-- Reg1 + Reg2 
        CMP : 
        SUB : Reg1 <-- Reg1 - Reg2
        MOV : Reg1 <-- Reg2
        
    (flag_to_ram = '01')

        ADD :
        CMP :
        SUB :
        MOV :
    
    (flag_from_ram = '01')

        ADD :
        CMP :
        SUB :
        MOV :

I INSTRUCTIONS:

    opcode = "01" 
    constant = "0000000" to "1111111" (7-bit)
    function = "00" to "11"
        where : 
            "00" => ADD 
            "01" => CMP
            "10" => SUB
            "11" => MOV
    
    Reg1 = "000" to "111"
    
    **WARNING : Reg "000" is READ-ONLY so can't be assigned any value!!
    
    FORMAT : 
        opcode + Reg1 + constant + function

    Description : 
        ADD : Reg1 <-- Reg1 + constant
        CMP : 
        SUB : Reg1 <-- Reg1 - constant
        MOV : Reg1 <-- constant