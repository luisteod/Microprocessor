All instructions contains 14 bits

JUMPA INSTRUCTION : 

    opcode = "11"
    addr = "00000000" to "01111111" (8 bits)

    FORMAT :    
        opcode + "0000" + addr 

JUMPR INSTRUCTIONS :

    opcode = "10"
    
    flag (Flip-flop that contains the value of the flag for jump or not jump)
        where :
            flag_z = "00" (zero)
            flag_nz = "01" (not zero)
            flag_n =  "10" (negative)
            flag_nn = "11" (not negative)
    
    rel (Value to jump from current instruction) - 8 bits of a two's complement number

    FORMAT : 
        opcode + flag + "00" + rel



R INSTRUCTIONS: 

    opcode = "00"

    function = "00" to "11"
        where :
            "00" => ADD 
            "01" => CMP
            "10" => SUB
            "11" => MOV

    Reg1 = "000" to "111"
    Reg2 = "001" to "111"  

    **WARNING : Reg "000" is READ-ONLY so can't be assigned any value!!

    FORMAT :
        opcode + Reg1 + Reg2 + "0000" + function

    Description : 
        ADD : Reg1 <-- Reg1 + Reg2
        CMP : Receives two Registers(Reg1 and Reg2) as operands and put result of greater than comparison in Reg3.
        SUB : Receives two Registers(Reg1 and Reg2) as operands and put the result of subtraction in Reg3.
        MOV : Reg1 <-- Reg2

I INSTRUCTIONS:

    opcode = "01" 
    constant = "0000000" to "1111111" (7-bit)
    function = "00" to "11"
        where : 
            "00" => ADD 
            "01" => CMP
            "10" => SUB
            "11" => MOV
    
    Reg1 = "000" to "111"
    
    **WARNING : Reg "000" is READ-ONLY so can't be assigned any value!!
    
    FORMAT : 
        opcode + Reg1 + constant + function

    Description : 
        ADD : Receives one Register(Reg1) and a constant as operands and put result of sum in Reg3.
        CMP : Receives one Register(Reg1) and a constant as operands and put result of greater than comparison in Reg3.
        SUB : Receives one Register(Reg1) and a constant as operands and put the result of subtraction in Reg3.
        MOV : Receives one Register(Reg1) and a constant as operands and put the result of equal comparison in Reg3.    